
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'ASSIGN COLON COMMA DO DROP DROP_CHIP ELSE EQUALS EXEC FI GOTO GRAB GRAB_BALLOON ID IF IS_BLOCKED IS_FACING JUMP LBRACE LET_GO LPAREN MACRO MOVE MOVES NEW NEW_MACRO NEW_VAR NOP NOT NUMBER OD PICK PICKUP_CHIP PLACE_BALLOON PLUS POP POP_BALLOON QUESTION RBRACE REP RPAREN SAFE_EXE SEMICOLON THEN TIMES TURN_RIGHT TURN_TO_MY TURN_TO_THE VAR WALK ZEROprogram : EXEC blockprogram : NEW VAR ID ASSIGN NUMBERprogram : NEW MACRO ID LPAREN param_list RPAREN blockblock : LBRACE stmt_list RBRACEstmt_list : stmt SEMICOLON stmt_list\n                 | stmt SEMICOLONstmt : IF condition THEN block ELSE block FI\n            | WALK LPAREN NUMBER RPAREN\n            | DROP LPAREN NUMBER RPAREN\n            | ID LPAREN param_list RPAREN\n            | NOPparam_list : ID COMMA param_list\n                  | ID\n                  | emptycondition : NOT LPAREN IS_BLOCKED LPAREN ID RPAREN RPAREN\n                 | IS_BLOCKED LPAREN ID RPARENempty :'
    
_lr_action_items = {'EXEC':([0,],[2,]),'NEW':([0,],[3,]),'$end':([1,4,17,36,50,],[0,-1,-4,-2,-3,]),'LBRACE':([2,28,45,46,],[5,5,5,5,]),'VAR':([3,],[6,]),'MACRO':([3,],[7,]),'IF':([5,18,],[10,10,]),'WALK':([5,18,],[11,11,]),'DROP':([5,18,],[12,12,]),'ID':([5,6,7,18,24,26,30,43,47,],[13,15,16,13,33,33,40,33,52,]),'NOP':([5,18,],[14,14,]),'RBRACE':([8,18,27,],[17,-6,-5,]),'SEMICOLON':([9,14,41,42,44,53,],[18,-11,-8,-9,-10,-7,]),'NOT':([10,],[20,]),'IS_BLOCKED':([10,29,],[21,39,]),'LPAREN':([11,12,13,16,20,21,39,],[22,23,24,26,29,30,47,]),'ASSIGN':([15,],[25,]),'ELSE':([17,38,],[-4,46,]),'FI':([17,51,],[-4,53,]),'THEN':([19,48,55,],[28,-16,-15,]),'NUMBER':([22,23,25,],[31,32,36,]),'RPAREN':([24,26,31,32,33,34,35,37,40,43,49,52,54,],[-17,-17,41,42,-13,44,-14,45,48,-17,-12,54,55,]),'COMMA':([33,],[43,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'block':([2,28,45,46,],[4,38,50,51,]),'stmt_list':([5,18,],[8,27,]),'stmt':([5,18,],[9,9,]),'condition':([10,],[19,]),'param_list':([24,26,43,],[34,37,49,]),'empty':([24,26,43,],[35,35,35,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> EXEC block','program',2,'p_program_exec','analizador_lexico.py',68),
  ('program -> NEW VAR ID ASSIGN NUMBER','program',5,'p_program_new_var','analizador_lexico.py',72),
  ('program -> NEW MACRO ID LPAREN param_list RPAREN block','program',7,'p_program_new_macro','analizador_lexico.py',76),
  ('block -> LBRACE stmt_list RBRACE','block',3,'p_block','analizador_lexico.py',80),
  ('stmt_list -> stmt SEMICOLON stmt_list','stmt_list',3,'p_stmt_list','analizador_lexico.py',84),
  ('stmt_list -> stmt SEMICOLON','stmt_list',2,'p_stmt_list','analizador_lexico.py',85),
  ('stmt -> IF condition THEN block ELSE block FI','stmt',7,'p_stmt','analizador_lexico.py',89),
  ('stmt -> WALK LPAREN NUMBER RPAREN','stmt',4,'p_stmt','analizador_lexico.py',90),
  ('stmt -> DROP LPAREN NUMBER RPAREN','stmt',4,'p_stmt','analizador_lexico.py',91),
  ('stmt -> ID LPAREN param_list RPAREN','stmt',4,'p_stmt','analizador_lexico.py',92),
  ('stmt -> NOP','stmt',1,'p_stmt','analizador_lexico.py',93),
  ('param_list -> ID COMMA param_list','param_list',3,'p_param_list','analizador_lexico.py',97),
  ('param_list -> ID','param_list',1,'p_param_list','analizador_lexico.py',98),
  ('param_list -> empty','param_list',1,'p_param_list','analizador_lexico.py',99),
  ('condition -> NOT LPAREN IS_BLOCKED LPAREN ID RPAREN RPAREN','condition',7,'p_condition','analizador_lexico.py',103),
  ('condition -> IS_BLOCKED LPAREN ID RPAREN','condition',4,'p_condition','analizador_lexico.py',104),
  ('empty -> <empty>','empty',0,'p_empty','analizador_lexico.py',108),
]
